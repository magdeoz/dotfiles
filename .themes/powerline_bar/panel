#! /bin/sh

FONT="-xos4-terminesspowerline-medium-r-normal--12-120-72-72-c-60-iso10646-1"
#FONT1="TerminessTTF Nerd Font :pixelsize=10"
FONT2="-*-fontawesome-medium-r-normal-*-12-*-*-*-*-0-*-*"
#FONT="-*-tamsyn-medium-r-normal-*-12-*-*-*-*-*-*-1"
ICONS="-xos4-terminusicons2mono-medium-r-normal--12-120-72-72-m-60-iso8859-1"
ICONS2="-wuncon-siji-medium-r-normal--10-100-75-75-c-80-iso10646-1"
BG="#1F201D"

BARHEIGHT=14
EDGEWIDTH=1
UNDERLINE_WIDTH=2

# Don't touch.  Edit width/height above instead.
SCREENHEIGHT=$(xrandr -q | grep Screen | awk '{print $10}' | sed s/,//)
SCREENWIDTH=$(xrandr -q | grep Screen | awk '{print $8}')
BARWIDTH=$(($SCREENWIDTH - $(($EDGEWIDTH * 2))))

source $(dirname $0)/panel_icons
source $(dirname $0)/panel_colors
source $(dirname $0)/panel_conf
#source $(dirname $0)/powerline_icons

#if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
#	printf "%s\n" "The panel is already running." >&2
#	exit 1
#fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT
bspc subscribe |\
        grep -oE "[Mm][^TM]*[TML]" --line-buffered |\
        while read line; do echo W$line; done > "$PANEL_FIFO" &

{

function GETIME {
        case $1 in
                HOUR)
                        timed=$(date | grep -o "[0-9]*:[0-9]*")
                        hour=$(date "+%H")
                        min=$(date "+%M")
                        mdhr=$((10#$hour % 12))
                        mdhr=11
                        part="AM"
                        if [[ "$hour" > 11 ]]; then
                                part="PM"
                        fi
                        if [[ "$mdhr" == 0 ]]; then
                                mdhr=12
                        fi
                        ICON=$(pIcon "#b0a9ab" ${CCLOCK})
                        echo -e "${ICON} $hour:$min $part"
                        ;;
                DATE)
                        ICON=$(pIcon "#b0a9ab" ${CDATE})
                        OUT=$(date +'%Y-%m-%d')
                        OUTPUT=$(echo $ICON $OUT)
                        local clr=$(pText ${COLOR_DEFAULT_FG} "${OUTPUT}")
                        echo -e "${clr}"
        esac
}

function TAGS() {
        case $1 in
                NAME)
                        des=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')
                        if [[ "$des" == "0" ]]; then
                                echo -e 'WEB'
                        elif [[ "$des" == "1" ]]; then
                                echo -e 'TERM'
                        elif [[ "$des" == "2" ]]; then
                                echo -e 'FILES'
                        elif [[ "$des" == "3" ]]; then
                                echo -e 'MUSIC'
                        elif [[ "$des" == "4" ]]; then
                                echo -e 'IMAGE'
                        elif [[ "$des" == "5" ]]; then
                                echo -e 'DEV'
                        else
                                echo " "
                        fi ;;
                NUMB)
                        des=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')
                        if [[ "$des" == "0" ]]; then
                                echo -e 'I'
                        elif [[ "$des" == "1" ]]; then
                                echo -e 'II'
                        elif [[ "$des" == "2" ]]; then
                                echo -e 'III'
                        elif [[ "$des" == "3" ]]; then
                                echo -e 'IV'
                        elif [[ "$des" == "4" ]]; then
                                echo -e 'V'
                        elif [[ "$des" == "5" ]]; then
                                echo -e 'VI'
                        fi ;;
        esac
}


function FOCUS () {
        wnd_focus=$(xdotool getwindowfocus)
        wnd_title=$(xprop -id $wnd_focus WM_CLASS | grep -Po "\".*?\"" | head -1 | grep -Po "[^\"]*" )
        if [[ "$wnd_title" == '' ]]; then
                wnd_title='Desktop'
        elif [[ "$wnd_title" == 'google-chrome' ]]; then
                wnd_title='Google Chrome'
        elif [[ "$wnd_title" == "telegram-desktop" ]]; then
                wnd_title='Telegram'
        fi
        get_icon=$(ICONFOCUS "$wnd_title")
        ICON=$(pIcon "#b0a9ab" ${get_icon})
        echo -e $ICON $wnd_title
}

function BATERY () {
        STAT=$(acpi -b | awk '{print $3}' | cut -d ',' -f1)
        BATERY=$(acpi -b | grep -P -o '[0-9]+(?=%)')
        if [ $STAT == "Charging" ]; then
                ICON=$(pIcon "#b0a9ab" $CAC)
                BATERY="AC"
                PORC=""
        else
                PORC="%"
                if [ $BATERY -gt 90 ]; then
                        ICON=$(pIcon "#979997" $BAT100)
                elif [ $BATERY -gt 70 ] && [ $BATERY -lt 90 ]; then
                        ICON=$(pIcon "#979997" $BAT70)
                elif [ $BATERY -gt 50 ] && [ $BATERY -lt 70 ]; then
                        ICON=$(pIcon "#979997" $BAT50)
                elif [ $BATERY -gt 30 ] && [ $BATERY -lt 50 ]; then
                        ICON=$(pIcon "#979997" $BAT30)
                elif [ $BATERY -gt 15 ] && [ $BATERY -lt 30 ]; then
                        ICON=$(pIcon "#979997" $BAT15)
                elif [ $BATERY -lt 7 ]; then
                        ICON=$(pIcon "#979997" $BAT7)
                fi
        fi
        echo -e "${ICON} ${BATERY}${PORC}"
}

function CPUINFO () {
        case $1 in
                FREE)
                        ICON=$(pIcon "#b0a9ab" $CCPU)
                        MEM=$(free -m | grep Mem: | awk '{printf $3 "/" $2 "Mb"}')
                        OUTPUT=$(echo -e "${ICON} ${MEM}")
                        CMD=$(pText ${COLOR_DEFAULT_FG} "${OUTPUT}")
                        local CLR=$(pActionSimple "xterm -e vtop --theme wizard &>/dev/null" "${CMD}" )
                        echo -e "${CLR}"
                        ;;
                TEMP)
                        TEMP=$(echo "scale=1; " `cat /sys/class/hwmon/hwmon0/temp1_input` "/1000" | bc)
                        echo -e "${TEMP}Â°C"
                        ;;
                LOAD)
                        ICON=$(pIcon "#b0a9ab" $CRAM)
                        CPU=$(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')
                        C_LVL=`printf "%.0f" $CPU`
                        CMD=$(echo "$C_LVL%")
                        OUTPUT=$(echo "${ICON} ${CMD} ")
                        local CLR=$(pText ${COLOR_DEFAULT_FG} "${OUTPUT}")
                        echo -e "${CLR}"
                        ;;
        esac
}

function DISK () {
        ICON=$(pIcon "#b0a9ab" $CDRIVE)
        DISK=$( df -h /home | tail -1 | grep 'Filesystem\|/home*' | awk '{printf $4 "/" $2}')
        OUTPUT=$(echo "${ICON} ${DISK}")
        local CLR=$(pText ${COLOR_DEFAULT_FG} "${OUTPUT}")
        echo -e "${CLR}"
}

function NET () {
        local _GETIWL=$(iwgetid -r)
        local _GETETH=$(ip a | grep "state UP" | awk '{ORS=""}{print $2}' | cut -d ':' -f 1)
        local _status=${_GETIWL:-$_GETETH}
        local _status2="${_status:-Down}"
        echo -e "${CWIFI} ${_status2}"
}

function VOL () {
    VOLUME=$(pulseaudio-ctl full-status | awk '{split($0, array, " ")} END{print array[1]}')
    MUTE=$(pulseaudio-ctl full-status | awk '{split($0, array, " ")} END{print array[2]}')
    if [ "$MUTE" == "yes" ]; then
            echo "Mute"
    else
            echo -e "${CVOLUME} $VOLUME%"
    fi
}

CMusic() {
        prev=$(echo "%{F#7c7c7e}%{B${COLOR_DEFAULT_BG}}%{A:mpc prev &>/dev/null:}$(printf '%b' ${CPREV})%{A}%{B-}%{F-}")
        pause=$(echo "%{F#7c7c7e}%{B${COLOR_DEFAULT_BG}}%{A:mpc pause &>/dev/null:}$(printf '%b' ${CPAUS})%{A}%{B-}%{F-}")
        play=$(echo "%{F#7c7c7e}%{B${COLOR_DEFAULT_BG}}%{A:mpc play &>/dev/null:}$(printf '%b' ${CPLAY})%{A}%{B-}%{F-}")
        next=$(echo "%{F#7c7c7e}%{B${COLOR_DEFAULT_BG}}%{A:mpc next &>/dev/null:}$(printf '%b' ${CNEXT})%{A}%{B-}%{F-}")
        echo "${prev}${pause}${play}${next}"
}

function MUSIC (){
        ICON=$(echo -e "%{F#782e43}$(printf '%b' ${CSOUND})%{F-}")
        local stat="$(mpc status | grep \# | awk '{print $1}')"
        local artist=$(mpc -f %artist% current)
        local musicname=$(mpc -f %title% current)
        local cmd=""
        if [ "${stat}" ] && [ "${stat}" = "[playing]" ] ; then
                cmd="%{A:xterm -e ncmpcpp &>/dev/null:}${artist:0:10} - ${musicname:0:20}%{A}"
        elif [ "${stat}" ] && [ "${stat}" = "[paused]" ] ; then
                cmd="%{A:xterm -e ncmpcpp &>/dev/null:}Paused >> ${artist:0:10} - ${musicname:0:20}%{A}"
        else
                cmd="%{A:xterm -e ncmpcpp &>/dev/null:}None%{A}"
        fi

        echo "${ICON} ${cmd}"
}

while :; do
        echo -e "S %{F$COLOR_DEFAULT_FG}" \
                "%{B$COLOR_RED}%{l}"\
                "$(pSectionL "$(TAGS NUMB)" $COLOR_RED $COLOR_BLACK $SEP_LEFT)"\
                "$(pSectionL "$(TAGS NAME)" $COLOR_BLACK $COLOR_GREY $SEP_LEFT)"\
                "$(pSectionL "$(FOCUS)" $COLOR_GREY $COLOR_BLACK $SEP_LEFT)"\
                "$(pSectionL "$(MUSIC)" $COLOR_BLACK $COLOR_GREY $SEP_LEFT)"\
                "%{F$COLOR_GREY}%{B-}$SEP_LEFT%{F-}"\
                "%{r}"\
                "%{F$COLOR_GREY}$SEP_RIGHT%{B$COLOR_GREY}"\
                "$(pSectionR $COLOR_BLACK $SEP_RIGHT $COLOR_BLACK $COLOR_DEFAULT_FG "$(DISK)")"\
                "$(pSectionR $COLOR_RED $SEP_RIGHT $COLOR_RED $COLOR_DEFAULT_FG "$(CPUINFO FREE)")"\
                "%{F$COLOR_DEFAULT_FG} $SEP_L_RIGHT $(CPUINFO LOAD)"\
                "$(pSectionR $COLOR_BLACK_GREY $SEP_RIGHT $COLOR_BLACK_GREY $COLOR_DEFAULT_FG "$(CPUINFO TEMP)")"\
                "$(pSectionR $COLOR_GREY $SEP_RIGHT $COLOR_GREY $COLOR_DEFAULT_FG "$(BATERY)")"\
                "$(pSectionR $COLOR_BLACK_GREY $SEP_RIGHT $COLOR_BLACK_GREY $COLOR_DEFAULT_FG "$(GETIME HOUR)")"\
                "%{B-}"
        sleep .5
done
} > "$PANEL_FIFO" &

$(dirname $0)/panel_bar < "$PANEL_FIFO" | lemonbar \
        -a 32 \
        -n "$PANEL_WM_NAME" \
        -g ${BARWIDTH}x${BARHEIGHT}+${EDGEWIDTH} \
        -u 2 \
        -f "${FONT}" \
        -f ${FONT2} \
        -f ${ICONS} \
        -f ${ICONS2} \
        -F "$COLOR_DEFAULT_FG" \
        -B "$COLOR_DEFAULT_BG" | sh | while read line; do eval "$line"; done &

wid=$(xdo id -a "$PANEL_WM_NAME")
tries_left=20
while [ -z "$wid" -a "$tries_left" -gt 0 ] ; do
	sleep 0.05
	wid=$(xdo id -a "$PANEL_WM_NAME")
	tries_left=$((tries_left - 1))
done
[ -n "$wid" ] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
